# -*- mode: ruby -*-
# vi: set ft=ruby :

# Networking
private_ip = ENV['PRIVATE_IP'] || "192.168.50.153"
consul_host_port = ENV['CONSUL_HOST_PORT'] || 8500
nomad_host_port = ENV['NOMAD_HOST_PORT'] || 4646

# Base box selection
base_box = ENV['BASE_BOX'] || "bento/ubuntu-16.04"

# Consul variables
consul_version = ENV['CONSUL_VERSION'] || "0.9.2"
consul_ent_url = ENV['CONSUL_ENT_URL']
consul_group = "consul"
consul_user = "consul"
consul_comment = "Consul"
consul_home = "/srv/consul"

# Nomad variables
nomad_version = ENV['NOMAD_VERSION'] || "0.6.2"
nomad_ent_url = ENV['NOMAD_ENT_URL']
nomad_group = "root"
nomad_user = "root"

# Tests & cleanup
run_tests = ENV['RUN_TESTS']
cleanup = ENV['CLEANUP']

$script = <<SCRIPT
# Set hostname's IP to make advertisement work
sudo sed -i -e "s/.*nomad.*/$(ip route get 1 | awk '{print $NF;exit}') nomad/" /etc/hosts
SCRIPT

Vagrant.configure("2") do |config|
  # Use vagrant insecure public key, comment this out to restrict access
  config.ssh.insert_key = false

  # Setup networking
  config.vm.network :private_network, ip: private_ip
  config.vm.network :forwarded_port, guest: 8500, host: consul_host_port, auto_correct: true
  config.vm.network :forwarded_port, guest: 4646, host: nomad_host_port, auto_correct: true
  config.vm.network "private_network", type: "dhcp"

  # Use base_box set at the top of this file
  config.vm.box = base_box
  config.vm.hostname = "nomad"
  config.vm.provision "shell", inline: $script, privileged: false

  # Copy the Consul, Nomad, and shared directories to the vm
  config.vm.provision "file", source: "../consul", destination: "/tmp"
  config.vm.provision "file", source: "../vault", destination: "/tmp"
  config.vm.provision "file", source: "../shared", destination: "/tmp"

  # Bootstrap the vm
  config.vm.provision "shell", inline: "bash /tmp/shared/scripts/base.sh"

  # Setup Consul user
  config.vm.provision "shell", inline: "bash /tmp/shared/scripts/setup-user.sh",
    env: {
      "GROUP" => consul_group,
      "USER" => consul_user,
      "COMMENT" => consul_comment,
      "HOME" => consul_home,
    }

  # Install Consul
  config.vm.provision "shell", inline: "bash /tmp/consul/scripts/install-consul.sh",
    env: {
      "VERSION" => consul_version,
      "URL" => consul_ent_url,
      "USER" => consul_user,
      "GROUP" => consul_group,
    }

  config.vm.provision "shell", inline: "bash /tmp/consul/scripts/install-consul-systemd.sh"

  # Install Nomad
  config.vm.provision "shell", inline: "bash /tmp/nomad/scripts/install-nomad.sh",
    env: {
      "VERSION" => nomad_version,
      "URL" => nomad_ent_url,
      "USER" => nomad_user,
      "GROUP" => nomad_group,
    }

  config.vm.provision "shell", inline: "bash /tmp/nomad/scripts/install-nomad-systemd.sh"
  config.vm.provision "shell", inline: "bash /tmp/nomad/scripts/install-docker.sh"
  config.vm.provision "shell", inline: "bash /tmp/nomad/scripts/install-oracle-jdk.sh"

  # Setup tests
  config.vm.provision "shell", inline: "bash /tmp/shared/scripts/setup-testing.sh"

  # Run tests if `RUN_TESTS` env var is provided
  if (run_tests)
    config.vm.provision "shell", inline: "cd /tmp && rake nomad:spec"
  end

  # Cleanup if `CLEANUP` env var is provided
  if (cleanup)
    config.vm.provision "shell", inline: "bash /tmp/shared/scripts/cleanup.sh"
  end

  # Increase memory for Parallels Desktop
  config.vm.provider "parallels" do |p, o|
    p.memory = "1024"
  end

  # Increase memory for Virtualbox
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
  end

  # Increase memory for VMware
  ["vmware_fusion", "vmware_workstation"].each do |p|
    config.vm.provider p do |v|
      v.vmx["memsize"] = "1024"
    end
  end

   config.vm.post_up_message = "
Your Nomad dev cluster has been successfully provisioned!

To SSH into a Nomad host, run the below command.

  $ vagrant ssh

You can interact with Nomad using any of the CLI (https://www.nomadproject.io/docs/commands/index.html) or API (https://www.nomadproject.io/api/index.html) commands.

  $ nomad server-members # Check Nomad's server members
  $ nomad node-status # Check Nomad's client nodes
  $ nomad init # Create a skeletion job file to deploy a Redis Docker container

  # Use the CLI to deploy a Redis Docker container
  $ nomad plan example.nomad # Run a nomad plan on the example job
  $ nomad run example.nomad # Run the example job
  $ nomad status # Check that the job is running
  $ nomad status example # Check job details
  $ nomad stop example # Stop the example job
  $ nomad status # Check that the job is stopped

  # Use the API to deploy a Redis Docker container
  $ nomad run -output example.nomad > example.json # Convert the example Nomad HCL job file to JSON
  $ curl -X POST -d @example.json http://127.0.0.1:4646/v1/job/example/plan | jq '.' # Run a nomad plan on the example job
  $ curl -X POST -d @example.json http://127.0.0.1:4646/v1/job/example | jq '.' # Run the example job
  $ curl -X GET http://127.0.0.1:4646/v1/jobs | jq '.' # Check that the job is running
  $ curl -X GET http://127.0.0.1:4646/v1/job/example | jq '.' # Check job details
  $ curl -X DELETE http://127.0.0.1:4646/v1/job/example | jq '.' # Stop the example job
  $ curl -X GET http://127.0.0.1:4646/v1/jobs | jq '.' # Check that the job is stopped

Visit the Consul UI: http://#{private_ip}:#{consul_host_port}/
Visit the Nomad UI: http://#{private_ip}:#{nomad_host_port}/

Don't forget to tear your VM down after.

  $ vagrant destroy
"
end
